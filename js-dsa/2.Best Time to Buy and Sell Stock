Dưới đây là hướng dẫn chi tiết bài toán **Best Time to Buy and Sell Stock** dành cho người mới bắt đầu:

---

### 1. **Giới thiệu bài toán**
#### Yêu cầu:
- Bạn được cung cấp một mảng `prices`, trong đó `prices[i]` là giá cổ phiếu vào ngày thứ `i`.
- **Mục tiêu**: Tìm lợi nhuận tối đa nếu mua cổ phiếu vào một ngày và bán vào một ngày sau đó.
- **Ràng buộc**: Chỉ được giao dịch **một lần** (mua 1 lần, bán 1 lần).

#### Ví dụ:
- **Đầu vào**: `prices = [7, 1, 5, 3, 6, 4]`
- **Đầu ra**: `5`  
  *Giải thích*: Mua vào ngày 2 (giá 1), bán vào ngày 5 (giá 6). Lợi nhuận = 6 – 1 = 5.

---

### 2. **Phân tích yêu cầu và ý tưởng chung**
- **Yêu cầu**: Tìm hai chỉ số `i` (ngày mua) và `j` (ngày bán) sao cho `j > i` và `prices[j] – prices[i]` lớn nhất.
- **Ý tưởng chung**:
  - Cách đơn giản: Kiểm tra tất cả cặp `(i, j)` để tìm lợi nhuận lớn nhất → Không hiệu quả.
  - Cách tối ưu: Theo dõi giá thấp nhất từ trái sang phải và tính lợi nhuận tiềm năng.

---

### 3. **Cách tiếp cận đơn giản (Brute Force)**
#### Code JavaScript:
```javascript
function maxProfitBruteForce(prices) {
    let maxProfit = 0;
    for (let i = 0; i < prices.length; i++) {
        for (let j = i + 1; j < prices.length; j++) {
            const profit = prices[j] - prices[i];
            if (profit > maxProfit) {
                maxProfit = profit;
            }
        }
    }
    return maxProfit;
}
```

#### Giải thích:
- **Hai vòng lặp lồng nhau**:
  - Vòng lặp ngoài (`i`) chọn ngày mua.
  - Vòng lặp trong (`j`) chọn ngày bán (phải sau `i`).
- **Nhược điểm**: Độ phức tạp `O(n²)` → Chậm với dữ liệu lớn (ví dụ: 10.000 phần tử mất ~100 triệu phép tính).

---

### 4. **Cách tối ưu (Duyệt một lần)**
#### Code JavaScript:
```javascript
function maxProfitOptimized(prices) {
    let minPrice = Infinity; // Giá mua thấp nhất
    let maxProfit = 0;       // Lợi nhuận tối đa
    
    for (let price of prices) {
        if (price < minPrice) {
            minPrice = price; // Cập nhật giá mua tốt nhất
        } else if (price - minPrice > maxProfit) {
            maxProfit = price - minPrice; // Tính lợi nhuận
        }
    }
    
    return maxProfit;
}
```

#### Giải thích:
- **Biến `minPrice`**: Theo dõi giá thấp nhất từ đầu đến thời điểm hiện tại.
- **Biến `maxProfit`**: Lợi nhuận lớn nhất có thể đạt được.
- **Duyệt mảng một lần**:
  - Nếu gặp giá thấp hơn `minPrice` → Cập nhật `minPrice`.
  - Ngược lại, tính lợi nhuận nếu bán ở giá hiện tại và so sánh với `maxProfit`.

#### Ưu điểm:
- **Độ phức tạp `O(n)`**: Duyệt mảng một lần → Tốc độ nhanh.

---

### 5. **Minh họa bằng bảng**
Ví dụ với `prices = [7, 1, 5, 3, 6, 4]`:

| Ngày | Giá | `minPrice` | `maxProfit` (Tính từ `price - minPrice`) |
|------|-----|------------|-----------------------------------------|
| 0    | 7   | 7          | 0                                       |
| 1    | 1   | 1          | 0                                       |
| 2    | 5   | 1          | 5 – 1 = **4**                           |
| 3    | 3   | 1          | 3 – 1 = 2                               |
| 4    | 6   | 1          | 6 – 1 = **5**                           |
| 5    | 4   | 1          | 4 – 1 = 3                               |

→ Kết quả: `5`.

---

### 6. **Bài tập thực hành**
1. **Kiểm tra code** với các đầu vào sau:
   - `[7, 6, 4, 3, 1]` → Kết quả: `0` (không có lợi nhuận).
   - `[2, 4, 1]` → Kết quả: `2` (mua 2, bán 4).
   - `[3]` → Kết quả: `0` (không thể bán).

2. **Tự code lại** thuật toán tối ưu và giải thích từng biến.

---

### 7. **Lưu ý quan trọng**
1. **Không bán trước khi mua**: Đảm bảo ngày bán (`j`) luôn sau ngày mua (`i`).
2. **Mảng rỗng hoặc 1 phần tử**: Trả về `0` vì không thể giao dịch.
3. **Giá không đổi**: Ví dụ `[5, 5, 5]` → Lợi nhuận `0`.

---

### Kết luận
- **Brute Force** dễ hiểu nhưng chậm, chỉ phù hợp với dữ liệu nhỏ.
- **Cách tối ưu** sử dụng một lần duyệt, phù hợp với mọi trường hợp.  
Hãy thử code và chạy thử các ví dụ để hiểu rõ hơn!