

# Python arrays are dynamic by default, but this is an example of resizing.
class Array:
    def __init__(self):
        self.capacity = 2
        self.length = 0
        self.arr = [0] * 2 # Array of capacity = 2

    # Insert n in the last position of the array
    def pushback(self, n):
        if self.length == self.capacity:
            self.resize()
            
        # insert at next empty position
        self.arr[self.length] = n
        self.length += 1

    def resize(self):
        # Create new array of double capacity
        self.capacity = 2 * self.capacity
        newArr = [0] * self.capacity 
        
        # Copy elements to newArr
        for i in range(self.length):
            newArr[i] = self.arr[i]
        self.arr = newArr
        
    # Remove the last element in the array
    def popback(self):
        if self.length > 0:
            self.length -= 1
    
    # Get value at i-th index
    def get(self, i):
        if i < self.length:
            return self.arr[i]
        # Here we would throw an out of bounds exception

    # Insert n at i-th index
    def insert(self, i, n):
        if i < self.length:
            self.arr[i] = n
            return
        # Here we would throw an out of bounds exception       

    def print(self):
        for i in range(self.length):
            print(self.arr[i])
        print()












### **Gi·∫£i th√≠ch t·ª´ng ph·∫ßn c·ªßa ƒëo·∫°n code**

Code n√†y m√¥ ph·ªèng **m·ªôt m·∫£ng ƒë·ªông t√πy ch·ªânh** gi·ªëng nh∆∞ c√°ch danh s√°ch (`list`) ho·∫°t ƒë·ªông trong Python, nh∆∞ng ƒë∆∞·ª£c vi·∫øt t·ª´ ƒë·∫ßu ƒë·ªÉ hi·ªÉu r√µ c√°ch m·ªü r·ªông k√≠ch th∆∞·ªõc m·∫£ng khi c·∫ßn. ƒê√¢y l√† c√°ch c√°c **m·∫£ng ƒë·ªông (dynamic arrays)** ho·∫°t ƒë·ªông trong c√°c ng√¥n ng·ªØ nh∆∞ C++ (`std::vector`).

---

### **1. Class `Array`**

#### **H√†m kh·ªüi t·∫°o (`__init__`)**
```python
def __init__(self):
    self.capacity = 2
    self.length = 0
    self.arr = [0] * 2  # T·∫°o m·∫£ng k√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh ban ƒë·∫ßu
```

- **M·ª•c ƒë√≠ch**: T·∫°o m·ªôt m·∫£ng v·ªõi:
  - `capacity`: S·ª©c ch·ª©a ban ƒë·∫ßu c·ªßa m·∫£ng l√† 2.
  - `length`: S·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ th·ª±c s·ª± hi·ªán c√≥ trong m·∫£ng (b·∫Øt ƒë·∫ßu t·ª´ 0).
  - `arr`: M·∫£ng ƒë·ªông, kh·ªüi t·∫°o b·∫±ng m·ªôt danh s√°ch `[0, 0]` (k√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh l√† 2).

---

#### **Ph∆∞∆°ng th·ª©c `pushback`**
```python
def pushback(self, n):
    if self.length == self.capacity:
        self.resize()
        
    self.arr[self.length] = n
    self.length += 1
```

- **M·ª•c ƒë√≠ch**: Th√™m ph·∫ßn t·ª≠ `n` v√†o cu·ªëi m·∫£ng.
- **C√°ch ho·∫°t ƒë·ªông**:
  1. **Ki·ªÉm tra s·ª©c ch·ª©a**:
     - N·∫øu m·∫£ng ƒë√£ ƒë·∫ßy (`length == capacity`), g·ªçi h√†m `resize` ƒë·ªÉ m·ªü r·ªông s·ª©c ch·ª©a.
  2. **Th√™m ph·∫ßn t·ª≠ v√†o v·ªã tr√≠ tr·ªëng**:
     - G√°n `n` v√†o v·ªã tr√≠ `self.arr[self.length]`.
  3. **TƒÉng `length`**:
     - Sau khi th√™m ph·∫ßn t·ª≠, tƒÉng `length` l√™n 1.

---

#### **Ph∆∞∆°ng th·ª©c `resize`**
```python
def resize(self):
    self.capacity = 2 * self.capacity
    newArr = [0] * self.capacity 
    
    for i in range(self.length):
        newArr[i] = self.arr[i]
    self.arr = newArr
```

- **M·ª•c ƒë√≠ch**: TƒÉng k√≠ch th∆∞·ªõc c·ªßa m·∫£ng khi n√≥ ƒë·∫ßy.
- **C√°ch ho·∫°t ƒë·ªông**:
  1. **TƒÉng g·∫•p ƒë√¥i s·ª©c ch·ª©a**: `self.capacity = 2 * self.capacity`.
  2. **T·∫°o m·∫£ng m·ªõi**:
     - T·∫°o m·∫£ng `newArr` c√≥ k√≠ch th∆∞·ªõc b·∫±ng `self.capacity`.
  3. **Sao ch√©p d·ªØ li·ªáu c≈©**:
     - Duy·ªát qua t·ª´ng ph·∫ßn t·ª≠ trong m·∫£ng c≈© (`self.arr`) v√† sao ch√©p v√†o `newArr`.
  4. **Thay th·∫ø m·∫£ng c≈©**:
     - G√°n `self.arr = newArr`.

---

#### **Ph∆∞∆°ng th·ª©c `popback`**
```python
def popback(self):
    if self.length > 0:
        self.length -= 1
```

- **M·ª•c ƒë√≠ch**: X√≥a ph·∫ßn t·ª≠ cu·ªëi trong m·∫£ng.
- **C√°ch ho·∫°t ƒë·ªông**:
  - N·∫øu m·∫£ng kh√¥ng r·ªóng (`length > 0`), gi·∫£m `length` ƒëi 1. 
  - Ph·∫ßn t·ª≠ cu·ªëi c√πng s·∫Ω kh√¥ng c√≤n ƒë∆∞·ª£c t√≠nh l√† m·ªôt ph·∫ßn t·ª≠ th·ª±c t·∫ø (kh√¥ng c·∫ßn x√≥a th·ªß c√¥ng v√¨ Python s·∫Ω kh√¥ng truy c·∫≠p n√≥ qua `self.length`).

---

#### **Ph∆∞∆°ng th·ª©c `get`**
```python
def get(self, i):
    if i < self.length:
        return self.arr[i]
```

- **M·ª•c ƒë√≠ch**: Tr·∫£ v·ªÅ gi√° tr·ªã t·∫°i v·ªã tr√≠ `i` trong m·∫£ng.
- **C√°ch ho·∫°t ƒë·ªông**:
  - N·∫øu `i` n·∫±m trong ph·∫°m vi h·ª£p l·ªá (`i < self.length`), tr·∫£ v·ªÅ `self.arr[i]`.
  - N·∫øu kh√¥ng, trong th·ª±c t·∫ø n√™n **n√©m ngo·∫°i l·ªá** (exception) ƒë·ªÉ b√°o l·ªói.

---

#### **Ph∆∞∆°ng th·ª©c `insert`**
```python
def insert(self, i, n):
    if i < self.length:
        self.arr[i] = n
```

- **M·ª•c ƒë√≠ch**: Ghi ƒë√® gi√° tr·ªã `n` t·∫°i v·ªã tr√≠ `i`.
- **C√°ch ho·∫°t ƒë·ªông**:
  - N·∫øu `i` n·∫±m trong ph·∫°m vi h·ª£p l·ªá (`i < self.length`), g√°n `self.arr[i] = n`.
  - N·∫øu kh√¥ng, trong th·ª±c t·∫ø n√™n **n√©m ngo·∫°i l·ªá** (exception).

---

#### **Ph∆∞∆°ng th·ª©c `print`**
```python
def print(self):
    for i in range(self.length):
        print(self.arr[i])
    print()
```

- **M·ª•c ƒë√≠ch**: Hi·ªÉn th·ªã c√°c ph·∫ßn t·ª≠ trong m·∫£ng.
- **C√°ch ho·∫°t ƒë·ªông**:
  - Duy·ªát qua c√°c ph·∫ßn t·ª≠ th·ª±c t·∫ø (`i < self.length`) v√† in ra t·ª´ng ph·∫ßn t·ª≠.

---

### **2. V√≠ d·ª• s·ª≠ d·ª•ng**

```python
arr = Array()  # T·∫°o m·∫£ng m·ªõi

arr.pushback(10)  # Th√™m 10 v√†o m·∫£ng
arr.pushback(20)  # Th√™m 20 v√†o m·∫£ng
arr.pushback(30)  # M·∫£ng ƒë·∫ßy, t·ª± ƒë·ªông m·ªü r·ªông r·ªìi th√™m 30

arr.print()  # K·∫øt qu·∫£: 10, 20, 30

arr.popback()  # X√≥a ph·∫ßn t·ª≠ cu·ªëi
arr.print()  # K·∫øt qu·∫£: 10, 20

arr.insert(1, 99)  # Ghi ƒë√® v·ªã tr√≠ 1 b·∫±ng 99
arr.print()  # K·∫øt qu·∫£: 10, 99
```

---

### **T√≥m t·∫Øt**
- **`pushback`**: Th√™m ph·∫ßn t·ª≠ v√†o cu·ªëi m·∫£ng, t·ª± ƒë·ªông m·ªü r·ªông n·∫øu ƒë·∫ßy.
- **`resize`**: TƒÉng g·∫•p ƒë√¥i s·ª©c ch·ª©a khi m·∫£ng ƒë·∫ßy.
- **`popback`**: X√≥a ph·∫ßn t·ª≠ cu·ªëi.
- **`get`**: L·∫•y gi√° tr·ªã t·∫°i v·ªã tr√≠ `i`.
- **`insert`**: Ghi ƒë√® gi√° tr·ªã t·∫°i v·ªã tr√≠ `i`.
- **`print`**: Hi·ªÉn th·ªã c√°c ph·∫ßn t·ª≠ trong m·∫£ng.

Code n√†y gi√∫p hi·ªÉu r√µ c√°ch ho·∫°t ƒë·ªông c·ªßa m·∫£ng ƒë·ªông m·ªôt c√°ch c∆° b·∫£n. N·∫øu c√≤n ch·ªó n√†o ch∆∞a r√µ, b·∫°n c·ª© h·ªèi nh√©! üòä